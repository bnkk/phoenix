from sly import Lexer

class BasicLexer(Lexer):
    tokens = { NAME, NUMBER, STRING, IF, ELSE, WHILE, THEN, ELSE, FOR, FUN, TO, ARROW, EQEQ}
    ignore = '\t '
    literals = { '=', '+', '-', '/', '*', '(', ')', ',', ';'}

    # Define tokens as regular expression
    IF = r'IF'
    THEN = r'THEN'
    ELSE = r'ELSE'
    FOR = r'FOR'
    FUN = r'FUN'
    TO = r'TO'
    ARROW = r'ARROW'
    NAME = r'[a-zA-Z_][a-zA-Z0-9_]*'
    STRING = r'\".*?\"'
    EQEQ = r'=='

    ignore_comment = r'\/\/.*'

    # Special cases
    #ID = r'[a-zA-Z_][a-zA-Z0-9_]*'
    #ID['if'] = IF 
    #ID['else'] = ELSE 
    #ID['while'] = WHILE

    # Number token
    @_(r'\d+')
    def NUMBER(self, t):
        t.value = int(t.value)
        return t
    
    @_(r'if')
    
    # Comment token
    @_(r'//.*')
    def COMMENT(self, t):
        pass

    # Newline token
    @_(r'\n+')
    def newline(self, t):
        self.lineno = t.value.count('\n')
    
    # Error token
    def error(self, t):
        print("Phoenix Character Error: Bad character, '%s', on line %d" % (t.value[0], self.lineno))
        self.index += 1
    
    def remove_quotes(self, text: str):
        if text.startswith('\"') or text.startswith('\''):
            return text[1:-1]
        return text